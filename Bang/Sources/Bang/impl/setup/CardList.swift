//
//  CardList.swift
//  
//
//  Created by Hugues Telolahy on 12/01/2023.
//
// swiftlint:disable line_length type_body_length

/// Bang cards list
enum CardList {
    
    static let abilities: [CardImpl] = [
        .init(name: .endTurn,
              desc: "Discard excess cards on ending your turn",
              type: .ability,
              onPlay: [Repeat(times: NumExcessHand(),
                              effect: Discard(player: PlayerActor(), card: CardSelectHand())),
                       SetTurn(player: PlayerNext())]),
        .init(name: .startTurn,
              desc: "Draw 2 cards before starting your turn",
              type: .ability,
              triggers: [OnSetTurn()],
              onTrigger: [Repeat(times: NumExact(2),
                                 effect: DrawDeck(player: PlayerActor()))]),
        .init(name: .leaveGame,
              desc: "You are eliminated when no more health points",
              type: .ability,
              triggers: [OnLooseLastHealth()],
              onTrigger: [Eliminate(player: PlayerActor())]),
        .init(name: .gameOver,
              desc: "Game is over",
              type: .ability,
              triggers: [OnEliminated(), IsGameOver()],
              onTrigger: [EndGame()])
    ]
    
    static let collectible: [CardImpl] = [
        .init(name: .beer,
              desc: "regain one life point. Beer has no effect if there are only 2 players left in the game.",
              type: .action,
              canPlay: [IsPlayersAtLeast(3)],
              onPlay: [Heal(player: PlayerActor(),
                            value: 1)]),
        .init(name: .saloon,
              desc: "all players in play regain one life point.",
              type: .action,
              onPlay: [Heal(player: PlayerDamaged(),
                            value: 1)]),
        .init(name: .stagecoach,
              desc: "Draw two cards from the top of the deck.",
              type: .action,
              onPlay: [Repeat(times: NumExact(2),
                              effect: DrawDeck(player: PlayerActor()))]),
        .init(name: .wellsFargo,
              desc: "Draw three cards from the top of the deck.",
              type: .action,
              onPlay: [Repeat(times: NumExact(3),
                              effect: DrawDeck(player: PlayerActor()))]),
        .init(name: .generalStore,
              desc: "When you play this card, turn as many cards from the deck face up as the players still playing. Starting with you and proceeding clockwise, each player chooses one of those cards and puts it in his hands.",
              type: .action,
              onPlay: [Repeat(times: NumPlayers(),
                              effect: Store()),
                       DrawStore(player: PlayerAll(),
                                 card: CardSelectStore())]),
        // TODO: catBalou may discard self's inPlay card, so add new player argument: anyOrSelf
        .init(name: .catBalou,
              desc: "Force “any one player” to “discard a card”, regardless of the distance.",
              type: .action,
              playTarget: PlayerSelectAny(),
              onPlay: [Discard(player: PlayerTarget(),
                               card: CardSelectAny())]),
        .init(name: .panic,
              desc: "Draw a card from a player at distance 1",
              type: .action,
              playTarget: PlayerSelectAt(1),
              onPlay: [Steal(player: PlayerActor(),
                             target: PlayerTarget(),
                             card: CardSelectAny())]),
        .init(name: .bang,
              desc: "reduce other players’s life points",
              type: .action,
              playTarget: PlayerSelectReachable(),
              canPlay: [IsTimesPerTurn(1)],
              onPlay: [ForceDiscard(player: PlayerTarget(),
                                    card: CardSelectHandNamed(.missed),
                                    otherwise: [Damage(player: PlayerTarget(), value: 1)])]),
        .init(name: .missed,
              desc: "If you are hit by a BANG! you may immediately play a Missed! - even though it is not your turn! - to cancel the shot."),
        .init(name: .gatling,
              desc: "shoots to all the other players, regardless of the distance",
              type: .action,
              onPlay: [ForceDiscard(player: PlayerOthers(),
                                    card: CardSelectHandNamed(.missed),
                                    otherwise: [Damage(player: PlayerTarget(), value: 1)])]),
        .init(name: .indians,
              desc: "Each player, excluding the one who played this card, may discard a BANG! card, or lose one life point. Neither Missed! nor Barrel have effect in this case.",
              type: .action,
              onPlay: [ForceDiscard(player: PlayerOthers(),
                                    card: CardSelectHandNamed(.bang),
                                    otherwise: [Damage(player: PlayerTarget(), value: 1)])]),
        .init(name: .duel,
              desc: "can challenge any other player. The first player failing to discard a BANG! card loses one life point.",
              type: .action,
              playTarget: PlayerSelectAny(),
              onPlay: [ChallengeDiscard(player: PlayerTarget(),
                                        challenger: PlayerActor(),
                                        card: CardSelectHandNamed(.bang),
                                        otherwise: [Damage(player: PlayerTarget(), value: 1)])]),
        .init(name: .barrel,
              desc: "allows you to “draw!” when you are the target of a BANG!: - if you draw a Heart card, you are Missed! (just like if you played a Missed! card); - otherwise nothing happens.",
              type: .equipment,
              triggers: [],
              onTrigger: []),
        .init(name: .jail,
              desc: "Play this card in front of any player regardless of the distance: you put him in jail! If you are in jail, you must “draw!” before the beginning of your turn: - if you draw a Heart card, you escape from jail: discard the Jail, and continue your turn as normal; - otherwise discard the Jail and skip your turn",
              type: .handicap,
              triggers: [],
              onTrigger: []),
        .init(name: .dynamite,
              desc: "Play this card in front of you: the Dynamite will stay there for a whole turn. When you start your next turn (you have the Dynamite already in play), before the first phase you must “draw!”: - if you draw a card showing Spades and a number between 2 and 9, the Dynamite explodes! Discard it and lose 3 life points; - otherwise, pass the Dynamite to the player on your left (who will “draw!” on his turn, etc.).",
              type: .handicap,
              triggers: [],
              onTrigger: []),
        .init(name: .mustang,
              desc: "the distance between other players and you is increased by 1",
              type: .equipment),
        .init(name: .scope,
              desc: "you see all the other players at a distance decreased by 1",
              type: .equipment),
        .init(name: .schofield,
              desc: "can hit targets at a distance of 2.",
              type: .equipment),
        .init(name: .remington,
              desc: "can hit targets at a distance of 3.",
              type: .equipment),
        .init(name: .revCarabine,
              desc: "can hit targets at a distance of 4.",
              type: .equipment),
        .init(name: .winchester,
              desc: "can hit targets at a distance of 5.",
              type: .equipment),
        .init(name: .volcanic,
              desc: "can play any number of BANG! cards during your turn but limited to a distance of 1",
              type: .equipment)
    ]
    
    static let figures: [CardImpl] = [
        .init(name: .willyTheKid,
              desc: "he can play any number of BANG! cards during his turn.",
              type: .ability),
        .init(name: .roseDoolan,
              desc: "she is considered to have an Appaloosa card in play at all times; she sees the other players at a distance decreased by 1. If she has another real Appaloosa card in play, she can count both of them, reducing her distance to all other players by a total of 2.",
              type: .ability),
        .init(name: .paulRegret,
              desc: "he is considered to have a Mustang card in play at all times; all other players must add 1 to the distance to him. If he has another real Mustang card in play, he can count both of them, increasing all distances to him by a total of 2).",
              type: .ability),
        .init(name: .jourdonnais,
              desc: "he is considered to have a Barrel card in play at all times; he can \"draw!\" when he is the target of a BANG!, and on a Heart he is missed. If he has another real Barrel card in play, he can count both of them, giving him two chances to cancel the BANG! before playing a Missed! card.",
              type: .ability),
        .init(name: .slabTheKiller,
              desc: "players trying to cancel his BANG! cards need to play 2 Missed! cards. The Barrel effect, if successfully used, only counts as one Missed!.",
              type: .ability),
        .init(name: .luckyDuke,
              desc: "each time he is required to \"draw!\", he flips the top two cards from the deck, and chooses the result he prefers. Discard both cards afterwards.",
              type: .ability),
        .init(name: .calamityJanet,
              desc: "she can use BANG! cards as Missed! cards and vice versa. If she plays a Missed! card as a BANG!, she cannot play another BANG! card that turn (unless she has a Volcanic in play).",
              type: .ability),
        .init(name: .bartCassidy,
              desc: "each time he loses a life point, he immediately draws a card from the deck.",
              type: .ability),
        .init(name: .elGringo,
              desc: "each time he loses a life point due to a card played by another player, he draws a random card from the hands of that player (one card for each life point). If that player has no more cards, too bad! Note that Dynamite damages are not caused by any player.",
              type: .ability),
        .init(name: .suzyLafayette,
              desc: "as soon as she has no cards in her hand, she draws a card from the draw pile.",
              type: .ability),
        .init(name: .vultureSam,
              desc: "whenever a character is eliminated from the game, Sam takes all the cards that player had in his hand and in play, and adds them to his hand.",
              type: .ability),
        .init(name: .sidKetchum,
              desc: "at any time, he may discard 2 cards from his hand to regain one life point. If he is willing and able, he can use this ability more than once at a time. But remember: you cannot have more life points than your starting amount!",
              type: .ability),
        .init(name: .blackJack,
              desc: "during the phase 1 of his turn, he must show the second card he draws: if it's Heart or Diamonds (just like a \"draw!\", he draws one additional card (without revealing it).",
              type: .ability),
        .init(name: .kitCarlson,
              desc: "during the phase 1 of his turn, he looks at the top three cards of the deck: he chooses 2 to draw, and puts the other one back on the top of the deck, face down.",
              type: .ability),
        .init(name: .jesseJones,
              desc: "during phase 1 of his turn, he may choose to draw the first card from the deck, or randomly from the hand of any other player. Then he draws the second card from the deck.",
              type: .ability),
        .init(name: .pedroRamirez,
              desc: "during the phase 1 of his turn, he may choose to draw the first card from the top of the discard pile or from the deck. Then, he draws the second card from the deck.",
              type: .ability)
    ]
    
    static let cardSets: [String: [String]] = [
        "barrel": ["Q♠️", "K♠️"],
        "dynamite": ["2♥️"],
        "jail": ["J♠️", "10♠️", "4♥️"],
        "mustang": ["8♥️", "9♥️"],
        "remington": ["K♣️"],
        "revCarabine": ["A♣️"],
        "schofield": ["K♠️", "J♣️", "Q♣️"],
        "scope": ["A♠️"],
        "volcanic": ["10♠️", "10♣️"],
        "winchester": ["8♠️"],
        .bang: ["A♠️", "2♦️", "3♦️", "4♦️", "5♦️", "6♦️", "7♦️", "8♦️", "9♦️", "10♦️", "J♦️", "Q♦️", "K♦️", "A♦️", "2♣️", "3♣️", "4♣️", "5♣️", "6♣️", "7♣️", "8♣️", "9♣️", "Q♥️", "K♥️", "A♥️"],
        .missed: ["10♣️", "J♣️", "Q♣️", "K♣️", "A♣️", "2♠️", "3♠️", "4♠️", "5♠️", "6♠️", "7♠️", "8♠️"],
        .beer: ["6♥️", "7♥️", "8♥️", "9♥️", "10♥️", "J♥️"],
        .catBalou: ["K♥️", "9♦️", "10♦️", "J♦️"],
        .duel: ["Q♦️", "J♠️", "8♣️"],
        .gatling: ["10♥️"],
        .generalStore: ["9♣️", "Q♠️"],
        .indians: ["K♦️", "A♦️"],
        .panic: ["J♥️", "Q♥️", "A♥️", "8♦️"],
        .saloon: ["5♥️"],
        .stagecoach: ["9♠️", "9♠️"],
        .wellsFargo: ["3♥️"]
    ]
}
