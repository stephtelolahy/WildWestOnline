//
//  CardGameMocks.generated.swift
//  CardGame
//
//  Generated by Mockingbird v0.20.0.
//  DO NOT EDIT
//

@testable import CardGame
@testable import Mockingbird
import Combine
import Foundation
import GameDSL
import Swift

private let mkbGenericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked CardGameEngineRule
public final class CardGameEngineRuleMock: CardGameEngineRule, Mockingbird.Mock {
  typealias MockingbirdSupertype = CardGameEngineRule
  public static let mockingbirdContext = Mockingbird.Context()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.20.0", "module_name": "CardGame"])

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    self.mockingbirdContext.sourceLocation = sourceLocation
    CardGameEngineRuleMock.mockingbirdContext.sourceLocation = sourceLocation
  }

  // MARK: Mocked `active`(_ `ctx`: Game)
  public func `active`(_ `ctx`: Game) -> [Event]? {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`active`(_ `ctx`: Game) -> [Event]?", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`ctx`)], returnType: Swift.ObjectIdentifier(([Event]?).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (Game) -> [Event]? { return mkbImpl(`ctx`) }
      if let mkbImpl = mkbImpl as? () -> [Event]? { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: [Event]? = mkbObject.`active`(`ctx`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([Event]?).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `active`(_ `ctx`: @autoclosure () -> Game) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Game) -> [Event]?, [Event]?> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Game) -> [Event]?, [Event]?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`active`(_ `ctx`: Game) -> [Event]?", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`ctx`)], returnType: Swift.ObjectIdentifier(([Event]?).self)))
  }

  // MARK: Mocked `triggered`(_ `ctx`: Game)
  public func `triggered`(_ `ctx`: Game) -> [Event]? {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`triggered`(_ `ctx`: Game) -> [Event]?", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.ArgumentMatcher(`ctx`)], returnType: Swift.ObjectIdentifier(([Event]?).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? (Game) -> [Event]? { return mkbImpl(`ctx`) }
      if let mkbImpl = mkbImpl as? () -> [Event]? { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          break
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: [Event]? = mkbObject.`triggered`(`ctx`)
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: ([Event]?).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `triggered`(_ `ctx`: @autoclosure () -> Game) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Game) -> [Event]?, [Event]?> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Game) -> [Event]?, [Event]?>(context: self.mockingbirdContext, invocation: Mockingbird.SwiftInvocation(selectorName: "`triggered`(_ `ctx`: Game) -> [Event]?", selectorType: Mockingbird.SelectorType.method, arguments: [Mockingbird.resolve(`ctx`)], returnType: Swift.ObjectIdentifier(([Event]?).self)))
  }
}

/// Returns a concrete mock of `CardGameEngineRule`.
public func mock(_ type: CardGameEngineRule.Protocol, file: StaticString = #file, line: UInt = #line) -> CardGameEngineRuleMock {
  return CardGameEngineRuleMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}
